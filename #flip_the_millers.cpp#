#include <iostream>
#include <fstream>
#include <string>
#include <algorithm>
#include <array>


// testing input orientations if only contains indices and minus sign
bool is_miller_index(const std::string& str) {
    std::string indices = "hkl" ; 
    for (char c : str) {
        if (indices.find(c) || c == '-' != std::string::npos) {
	  return true;
        }
    }
    return false;
}





int main(int argc, char* argv[]) {
    // Check if filename was provided
    if (argc < 5) {
        std::cerr << "Usage: " << argv[0] << " <filename.HKL> h k l \n or k h l (to flip h and k)\n or -h l k (to flip k and l, while inverting h)" << std::endl;
        return 1;
    }

    // Open file specified as first argument
    std::ifstream inputFile(argv[1]);
    
    if (!inputFile.is_open()) {
        std::cerr << "Error opening file: " << argv[1] << std::endl;
        return 1;
    }
    
    
    // understand the requested modification
    if ((std::string(argv[2]) == argv[3]) || (std::string(argv[2]) == argv[4]) || (std::string(argv[4]) == argv[3]))
      {
	std::cout << "Error: some indices entered are the same" << std::endl;
	if ((!is_miller_index(argv[2])) || (!is_miller_index(argv[3])) || (!is_miller_index(argv[4]))) {
	  std::cerr << "Error: miller indices information, it should only be h k l, and a minus sign (if inverting needed)" << std::endl;
	  std::cerr << "Usage: " << argv[0] << " <filename.HKL> h k l \n or k h l (to flip h and k)\n or -h l k (to flip k and l, while inverting h)" << std::endl;
	  return 1;
	}
      }
    else {
      std::array<char, 3> hkl = {'h', 'k', 'l'};
      for (int i=0; i<3; i++)
	{
	  std::string inverting = "";
	  for (int j=2; j<5; j++)
	    {
	      if (std::string(argv[j]).find(hkl[i]) != std::string::npos)
		{
		  if (std::string(argv[j]).find('-') != std::string::npos) {
		    std::string str = argv[j];
		    str.erase(std::remove(str.begin(), str.end(), '-'), str.end());
		    inverting = "and inverting " + str;
		  }
		  std::cout << "Flipping "<<hkl[i]<<" with "<<hkl[j-2]<<" "<<inverting << std::endl;		  
		}
}
}
    


    // Read and print file contents line by line
std::string line;
while (std::getline(inputFile, line)) {
std::istringstream iss(line);
    //     if (line.find("!END_OF_HEADER") != std::string::npos) {
    //         // get_the_millers = True;
    //     }

    //     std::cout << line << std::endl;
    }

    inputFile.close();
    return 0;
}
